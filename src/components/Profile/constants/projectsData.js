export const projects = [
  {
    id: 1,
    title: "BeeVarium",
    serviceType: "웹서비스",
    period: "2024.02 - 2024.04 (7주)",
    team: "6명 (프론트엔드 3명, 백엔드 3명)",
    organization: "삼성 청년 SW 아카데미 공통 프로젝트",
    description: "WebRTC 기반 실시간 다국어 스트리밍 플랫폼으로, 한/영 자동 번역 및 AI 욕설 필터링 기능을 제공. 방송 중 채팅, 도네이션, 소셜 로그인 등 다양한 부가 기능과 함께 실시간 커뮤니케이션 환경을 구현한 프로젝트입니다.",
    overview: [
      "Beevarium은 '벌집(Bee + Vivarium)'을 뜻하며, 다국적 사용자들이 모이는 스트리밍 공간을 의미합니다.",
      "국내 스트리밍 플랫폼(예: 치지직, SOOP 등)의 글로벌 확산 흐름에 맞춰, 글로벌 유저 친화적인 기능을 제공하고자 기획된 서비스입니다.",
      "실시간 번역 및 AI 기반 욕설 필터링 기능을 통해 언어 장벽과 문화적 불쾌감을 줄이는 스트리밍 환경을 제공합니다.",
      "최근 빈번하게 발생하는 스트리머의 욕설 논란을 고려하여, 시청자의 불편함을 최소화하는 데 초점을 맞췄습니다."
    ],
    tech: ["Vue.js", "Socket.io", "OpenVidu", "SOLAR"],
    thumbnail: "/assets/projects/beevarium.png",
    demoUrl: "https://chajunseok.github.io/beevarium",
    githubUrl: "https://github.com/chajunseok/beevarium",
    isMobile: false,
    features: [
      "OpenVidu를 활용한 WebRTC 기반의 안정적인 실시간 스트리밍 환경 구축",
      "SOLAR AI 모델을 적용한 실시간 한/영 초월 번역 시스템 구현",
      "Socket.io를 활용한 실시간 채팅 및 도네이션 기능 제공",
      "Kakao 및 Naver 소셜 로그인(OAuth) 기능 지원",
      "스트리머를 위한 방송 대시보드 제공 (방송 세팅 및 유저 벤 기능 포함)",
      "스트리밍 클립 저장 및 방송국 페이지를 통한 다시보기 기능 구현",
      "사용자 경험 강화를 위한 메인 페이지 캐러셀 및 콘텐츠 페이지네이션 구현"
    ],
    techReasons: {
      "Vue.js": "FE 팀원들이 Vue.js에 대한 경험이 많아 개발 생산성과 협업 효율이 높았고, OpenVidu 공식 문서 및 샘플 코드가 Vue.js 기반 예제를 중심으로 제공되어 기술 연동 및 초기 개발 환경 구성에 유리하다고 판단하여 선택함.",
      "Socket.io": "스트리머와 시청자 간의 채팅, 도네이션 알림 등 실시간 양방향 통신이 필요한 기능을 안정적이고 지연 없이 구현하기 위해 사용함.",
      "OpenVidu": "WebRTC 기반 스트리밍 기능을 직접 구현하기보다, 세션 관리, 브라우저 호환성 문제 등을 효율적으로 처리할 수 있는 WebRTC 플랫폼이 필요해 도입함.",
      "SOLAR": "욕설 필터링 및 자동 번역 기능 구현을 위해 자연어 처리 성능이 우수한 국내 AI 모델을 활용했으며, 한/영 텍스트 변환 및 필터링 로직에 최적화되어 있어 선택함."
    },
    
    roles: [
      "Beevarium 메인 페이지의 감성적 UX/UI 설계 및 캐러셀 인터랙션 구현으로 브랜드 아이덴티티 강화",
      "OpenVidu 라이브러리를 활용한 세션 ID 기반 1:N 실시간 스트리밍 구조 전반 설계 및 구현",
      "Socket.io의 이벤트 리스너를 활용해 서버를 거치지 않고 즉각 반영되는 N:N 양방향 채팅 기능 개발",
      "방송 종료 시 채팅 로그를 서버에 저장하도록 처리하여 대화 이력 보존 기능 구현",
      "SOLAR AI 연동 시 도네이션, 채팅, AI 스크립트를 같은 소켓 채널에서 분리 처리하여 성능 최적화",
      "원하는 시점에서 스트리밍 클립을 생성할 때 원하는 시간만큼 시작/종료할 수 있는 기능 및 맞춤형 UI 개발로 사용자 경험 향상",
      "도네이션 메시지에 TTS(Text-to-Speech)를 적용해 실시간 음성 출력 기능 구현",
      "스트리머가 채팅 내용을 쉽게 확인할 수 있도록 다층 구조(Depth)의 모달 UI 설계 및 구현"
    ],
    troubleshooting: [
      {
        issue: "AI 스크립트 처리 지연 및 순서 불일치 문제",
        problem: "AI 스크립트 생성 과정이 'STT → 백엔드 API 요청 → LLM 처리 → 응답 반환' 순으로 진행되며, 처리에 1분 이상 소요됨. 또한 문장이 짧을수록 먼저 응답되어 스크립트가 순서대로 도착하지 않는 문제가 발생함.",
        solution: "Socket.io 기반의 실시간 통신으로 절차를 간소화하고, LLM 모델을 경량화한 후 각 스크립트에 고유 순서를 부여하여 동기적으로 재정렬되도록 처리하여, 응답 속도를 평균 2초 이내로 줄이고 출력 순서를 정확하게 유지함."
      },
      {
        issue: "다중 방송 송출 시 스트리머 세션 충돌 문제",
        problem: "여러 스트리머가 동시에 방송을 송출할 때, 세션 식별자가 꼬이면서 송출방이 뒤섞이는 현상이 발생함.",
        solution: "Pinia 저장소를 활용해 송출자 ID를 전역으로 관리하고 시청자 세션 ID와 명확히 연동하여, 1:N 송출 구조에서도 세션 충돌 없이 안정적인 멀티 송출이 가능하도록 개선함."
      },
      {
        issue: "Socket.io 채널 분산으로 인한 서버 부하",
        problem: "AI 스크립트, 채팅, 도네이션 기능이 각각 다른 Socket.io 채널을 통해 통신하며, 다수의 사용자가 접속 시 CPU 사용량이 100%에 도달하는 등의 부하 발생.",
        solution: "모든 기능을 단일 Socket 채널로 통합하고 JSON 파싱을 통해 기능별 메시지를 분기 처리하도록 구성하여, 서버 부하를 줄이고 안정적인 통신 성능을 확보함."
      }
    ],
    review: [
      "삼성 청년 SW 아카데미에서 프로젝트 우수상(22개 팀 중 3위) 수상",
      "이 프로젝트는 제 인생 첫 배포 프로젝트였고, 처음 접한 WebRTC, 실시간 번역 시스템, Socket.io 기반 통신 등 모든 기술이 낯설고 도전적이었습니다.특히 배포 과정에서 예상치 못한 CORS 에러, 환경변수 관리 이슈 등에 직면하며 큰 벽을 느꼈고, ‘내가 이걸 끝낼 수 있을까?’ 하는 생각이 들 만큼 막막했던 순간도 많았습니다.",
    
      "하지만 이런 문제들을 하나하나 해결해가며 단순히 기술을 사용하는 수준을 넘어서, 전체 구조를 이해하고 직접 설계할 수 있는 능력과 자신감을 얻게 되었습니다.",
      "WebRTC를 활용한 스트리밍 구조나 AI 번역 시스템의 처리 흐름을 구현하면서 실시간 통신과 AI 기술이 프론트엔드에서 어떻게 융합되는지를 깊이 있게 배울 수 있었습니다. \n또한, 빠른 응답이 중요한 서비스에서는 REST API보다 Socket 통신이 훨씬 유리하다는 점을 직접 체감하며 실시간 시스템에 대한 이해도를 넓힐 수 있었습니다.",
    
    ]
    
  },
  {
    id: 2,
    title: "POTLESS",
    serviceType: "웹서비스 + 앱서비스",
    period: "2023.03 - 2023.06 (14주)",
    team: "7명 (웹 프론트엔드 2명, 앱 프론트엔드 1명, 백엔드 4명)",
    organization: "삼성 청년 SW 아카데미 자율 프로젝트",
    description: "YOLOv8 기반 도로 파손 자동 탐지 및 시각화 시스템으로, 대전시 도로 데이터를 탐지하여 파손 위치 및 위험도를 지도 기반으로 시각화하고 통계를 제공하는 관리자용 웹 애플리케이션입니다.",
    overview: [
      "POTLESS는 'Pothole'과 'Less'의 합성어로, 도로 파손을 줄이고 보다 효율적으로 관리하기 위한 목적의 플랫폼입니다.",
      "공공데이터를 활용하여 YOLOv8 기반 객체 탐지 모델을 다양한 기법으로 직접 학습·경량화하고, 이를 휴대폰 앱에 탑재해 차량 주행 중 도로 파손을 실시간 감지하고 서버로 전송하는 시스템을 구현했습니다.",
      "수집된 데이터는 웹 플랫폼을 통해 지도와 통계로 시각화되며, 담당 공무원들이 유지보수 의사결정에 즉시 활용할 수 있도록 구성했습니다.",
      "기존에는 도로 파손 보수 관련 정보가 네이버 밴드, 카카오톡 등 비공식 채널을 통해 공유되고 있으며, 공식적인 플랫폼이 부재한 상황에서 종이 기반 보고서로 정리되어 통계화나 조회가 매우 어려운 실정입니다.",
      "이러한 문제의식을 바탕으로, 대전시·화성시·전주시 등의 실제 공무원과의 대면 인터뷰를 통해 현장의 피드백을 수집하고, 실제 행정 환경에 적합한 기능을 중심으로 서비스 완성도를 높여나갔습니다.",
      "최근 이상기후로 인해 도로 파손 빈도가 증가하고 사고 위험도 함께 커지는 사회적 흐름 속에서, 빠른 대응과 예측 가능한 도로 유지보수를 위한 기술적 대안을 제시하고자 기획된 프로젝트입니다."
    ]
    ,
    tech: ["Vue.js", "Python", "YOLO v8"],
    thumbnail: "/assets/projects/potless.png",
    demoUrl: "https://chajunseok.github.io/potless",
    githubUrl: "https://github.com/chajunseok/potless",
    isMobile: false,
    features: [
      "도로 파손 감지 데이터를 기반으로 KakaoMap에 시각화하여, 위치 기반 도로파손 현황을 직관적으로 확인할 수 있는 지도 기능 제공",
      "행정구역(시·구·동) 단위의 파손 건수 및 위험도 통계를 시각화한 대시보드를 통해 공무원이 유지보수 우선순위를 쉽게 파악할 수 있도록 지원",
      "AI 모델이 분류한 파손 유형(크랙, 패임 등)을 기준으로 색상 및 카테고리별 시각화를 제공, 유형별로 빠른 접근 및 조치 가능",
      "위험도 분석을 위해 도로 선과 차량 타이어 크기를 기준으로 파손 넓이를 자동 측정하고, 그 결과를 기반으로 파손 데이터를 등급화하여 저장",
      "중복 탐지를 방지하기 위해 H3 공간 인덱싱 알고리즘을 활용하여 동일 위치의 반복 탐지 데이터를 count 방식으로 처리",
      "파손 데이터를 날짜, 위험도, 파손 유형 등 다양한 조건으로 필터링하여 필요한 정보에 빠르게 접근 가능",
      "도로보수 보고서 생성 시스템 구현: 감지된 도로파손 중 보수 대상 선택 → 기간 설정 및 팀원 지정 → 작업 생성 및 보고서 자동 발행 → 앱과 웹 플랫폼에서 담당자별 할당 작업 확인 가능",
      "작업 중 도로 보수 경로 추천 기능 제공: U턴이 불가능한 대형 작업 차량을 고려하여, U턴 없이 최적 경로를 추천하는 전용 알고리즘 설계 및 적용",
      "이중 AI 탐지 시스템 도입: 모바일에서 경량화된 AI 모델로 1차 예측 후, 서버에서 고성능 AI 모델로 교차 검증을 통해 높은 정확도의 파손 데이터만 저장",
      "보수 이력과 작업 내역을 PDF 보고서로 출력 가능한 기능을 제공하여 행정 업무의 편의성과 효율성 향상"
    ],
    techReasons: {
      "Vue.js": "프로젝트 당시 프론트엔드 팀원 간 Vue.js에 대한 경험이 가장 풍부했고, 복잡한 대시보드, 지도 시각화, 필터 등 다양한 UI 요소를 빠르게 구현할 수 있어 개발 효율이 높았습니다. 유지보수성과 컴포넌트 재사용성 또한 뛰어나 팀워크와 작업 속도 향상에 크게 기여했습니다.",
      "Python": "AI 모델 학습과 이미지 기반 데이터 처리에 특화된 언어로, YOLOv8 모델 학습 및 추론에 필수적이었습니다. 감지된 도로파손 데이터가 이미지 형식으로 저장되기 때문에 OpenCV 기반의 이미지 전처리 및 후처리가 필요했으며, 공공데이터가 부족한 상황에서 Data Augmentation을 통해 학습 데이터를 늘릴 수 있었던 점 또한 Python을 선택한 핵심 이유였습니다.",
      "YOLO v8": "객체 탐지 모델 중 사용성과 커스터마이징이 가장 쉬운 모델로, 이미지 기반의 도로파손 탐지 작업에 적합했습니다. 특히 모바일 디바이스에 AI 모델을 탑재하려는 기획 의도에 따라 경량화된 YOLOv8 small 모델을 사용할 수 있었던 점이 큰 장점이었습니다."
    },
    roles: [
      "Vue.js를 활용한 전체 관리자 웹 플랫폼 UI 설계 및 페이지 구성 (대시보드, 지도, 필터, 보고서 등)",
      "Pinia 전역 상태 관리를 도입하여 담당자 정보 및 로그인 사용자 정보를 안정적으로 관리",
      "Chart.js를 활용하여 도로 파손 통계 데이터를 시각적으로 표현하고, 지역별 위험도와 파손 유형을 직관적으로 비교 가능하도록 구현",
      "PDF 다운로드 라이브러리를 활용해 파손 데이터를 기반으로 행정 보고서 자동 생성 및 출력 기능 개발",
      "카카오맵 API와 마커 기능을 활용하여 도로 파손 위치 시각화 및 경로 표시 인터페이스 구현",
      "select 박스, 날짜 필터, 검색 입력창 등을 활용한 커스텀 필터 기능 개발 및 페이지네이션 구현으로 사용자 UX 최적화",
      "YOLOv8 학습을 위한 PyTorch 기반 가상 환경 구성(anaconda prompt 활용) 및 모델 학습 워크플로우 정리 지원",
      "OpenCV를 활용한 수평/수직 이동, 회전, 밝기 조정, 색상 반전 등 다양한 Data Augmentation 기법을 학습하고 실제 데이터셋에 적용하여 모델 성능 향상에 기여",
      "대전시·화성시·전주시 공무원 대상 대면 인터뷰를 통해 현업 피드백을 수집하고, 웹 플랫폼에 요구사항을 빠르게 반영하여 실사용성 높은 기능 개선 주도"
    ],
    troubleshooting: [
      {
        issue: "프론트엔드 및 AI를 모두 담당하며 과중한 역할 수행",
        problem: "개발 규모에 비해 인력이 부족한 상황에서 프론트엔드 전체 구조와 기능 구현뿐 아니라 AI 파트 리더까지 맡게 되었고, 기획 및 피그마 등 디자인 리소스도 부재하여 초기 개발 방향 설정에 큰 어려움을 겪음. 기능이 점차 확장되면서 초기 구조로는 감당이 어려워졌고, 개발 효율과 협업에도 영향을 미침.",
        solution: "프로젝트 중반에 기존 구조를 전면 재검토하고, 컴포넌트 중심으로 역할과 책임을 분리하여 재설계함. 이를 통해 기능 확장에 유연하게 대응할 수 있는 구조를 만들었고, 개발 속도 및 유지보수성을 크게 개선함. 이 과정에서 프론트엔드 구조 설계와 성능 최적화의 중요성을 깊이 체감하게 되었음."
      },
      {
        issue: "AI 모델 학습 데이터 편향 및 성능 저하 문제",
        problem: "공공데이터를 기반으로 학습을 진행한 YOLOv8 모델이 특정 날씨(맑은 날)에만 잘 작동하고, 흐리거나 어두운 환경에서는 탐지 정확도가 크게 떨어지는 문제 발생. 팀 내 객체 탐지 경험자가 없어 문제 원인 분석 및 해결이 지연됨.",
        solution: "객체 탐지 AI 리더로서 학습 데이터의 일반화를 위해 다양한 논문을 참고하여 데이터셋의 다양성 확보에 집중함. OpenCV를 활용한 Data Augmentation(수평/수직 이동, 회전, 밝기 조절 등)을 직접 구현하고 적용하여 데이터 편향 문제를 해소하고, 모델 학습률과 예측 정확도를 점차 향상시킬 수 있었음."
      }
    ],
    review: [
      "삼성 청년 SW 아카데미 최종 프로젝트에서 대상(전국 168개 팀 중 1위)을 수상하였으며, 수료 발표회에서 단독 발표로 프로젝트를 소개하는 영예를 얻었습니다.",
      
      "이 프로젝트를 통해 개발자가 세상을 더 편리하고 살기 좋은 방향으로 바꿀 수 있다는 사실을 처음으로 진심으로 체감할 수 있었습니다. 특히 도로파손 담당 공무원 분들과의 지속적인 대면 인터뷰를 통해 현실적인 문제와 행정 시스템의 불편함을 직접 들을 수 있었고, 최종적으로 해당 플랫폼을 실제 도입하고 싶다는 긍정적인 피드백을 받았을 때의 감동은 지금도 잊히지 않습니다. 개발 당시에는 프론트엔드 구조 설계부터 전체 UI/UX 구현, AI 파트까지 병행하며 많은 어려움을 겪었지만, 그만큼 성장도 컸습니다. 프로젝트 중간에 구조를 리팩토링하며 컴포넌트 기반 설계가 얼마나 중요한지 깊이 있게 깨달았고, 이후 진행한 다른 프로젝트들에서도 항상 구조와 설계를 우선적으로 고려하게 되는 전환점이 되었습니다.",
      
      "실제 문제를 해결하고, 사용자에게 의미 있는 가치를 제공하는 프로젝트를 만들었다는 자부심을 느낄 수 있었던 소중한 경험이었습니다."
    ]
         
  },
  {
    id: 3,
    title: "BeddingHome",
    serviceType: "웹서비스 + 앱서비스",
    period: "2024.07 - 2025.02 (7개월)",
    team: "5명 (웹 프론트엔드 2명, 앱 프론트엔드 1명, 백엔드 2명)",
    organization: "프리랜서 외주 프로젝트",
    description: "(주) 오케이홈의 외주 의뢰로 진행된 프로젝트로, 사업자 인증을 통해 도매 전용 서비스를 제공하는 반응형 웹 쇼핑몰입니다. THREE.js를 활용한 맞춤형 커튼 제작 기능과, 제품 조회·수정·삭제가 가능한 관리자 운영 시스템까지 포함된 통합 커머스 플랫폼입니다.",
    overview: [
      "(주) 오케이홈의 외주 요청으로 기획된 실제 상용 침구류 커머스 프로젝트입니다.",
      "인증된 사업자만 접근 가능한 도매 쇼핑몰 기능을 구현하여 B2B 판매 구조를 지원합니다.",
      "사용자는 THREE.js 기반 커스터마이징 기능을 통해 커튼 소재, 길이, 컬러를 자유롭게 조합하여 제품을 시뮬레이션할 수 있습니다.",
      "일반 쇼핑몰 기능(결제, 주문, 장바구니, 마이페이지 등)을 모두 갖춘 완성형 웹 플랫폼입니다.",
      "운영진이 제품과 주문을 손쉽게 관리할 수 있도록, 관리자 전용 비개발자 친화형 CMS를 함께 개발하여 운영 효율을 극대화했습니다."
    ],
    tech: ["React.js", "THREE.js", "styled-components"],
    thumbnail: "/assets/projects/beddinghome.png",
    demoUrl: "https://fabricz.store/",
    isMobile: false,
    features: [
      "3D 맞춤 커튼 제작 기능 제공: 커튼의 색상, 소재, 길이 등을 실시간으로 변경하며 시뮬레이션 가능",
      "회원의 누적 결제 금액에 따라 자동 등급 조정이 이루어지는 멤버십 시스템 구현",
      "로그인한 회원의 멤버십 등급에 따라 제품 상세 페이지의 가격이 동적으로 반영되어 출력되도록 처리",
      "KG이니시스 결제 모듈을 연동하여 카드, 간편결제, 계좌이체 등 다양한 결제 수단 지원",
      "회원가입 시 인증 이메일 자동 발송 기능 구현",
      "모바일, 태블릿, PC 환경에 따라 자동으로 최적화되는 반응형 웹 레이아웃 구현",
      "사용자 전용 마이페이지 구현: 주문 내역 조회, 배송 상태 확인, 회원 정보 수정, 거래명세서 PDF 다운로드 가능",
      "고객 문의, 공지사항을 처리할 수 있는 CS 게시판 시스템 구축",
      "관리자가 제품 등록/수정/삭제, 주문 처리, 회원 정보 관리 등을 수행할 수 있는 관리자 CMS 제공",
      "배너 이미지, 팝업, 메인 캐러셀, 이벤트 페이지 등의 HTML 요소를 비개발자도 수정할 수 있는 콘텐츠 관리 기능 구현",
      "차트, 그래프, 카드 기반의 시각화 대시보드를 통해 매출, 주문 수량, 인기 상품 등의 통계 정보 제공",
      "멤버십 등급 정책, 할인률, 결제 방식 등 주요 상거래 로직을 관리자 페이지에서 직접 설정/수정 가능"
    ],
    techReasons: {
      "React.js": "컴포넌트 기반 구조를 통해 반복되는 UI 요소들을 효율적으로 관리할 수 있었고, 상태 변화에 따른 실시간 렌더링이 용이하여 쇼핑몰 상품 정보, 마이페이지, 관리자 페이지 등 다양한 페이지를 빠르고 유연하게 구현할 수 있었음.",
      
      "THREE.js": "사용자가 직접 커튼의 색상, 길이, 소재를 실시간으로 변경하며 시뮬레이션할 수 있는 3D 커스터마이징 기능 구현을 위해 도입함. 복잡한 3D 오브젝트의 렌더링을 웹 브라우저 상에서 구현할 수 있는 가장 적합한 라이브러리였음.",
      
      "styled-components": "컴포넌트별 스타일을 모듈화하여 유지보수성과 재사용성을 높였으며, 조건부 렌더링 및 props 기반 스타일링이 용이해 반응형 UI 구성에 적합했음. 특히 관리자 페이지와 사용자 페이지가 명확히 분리되어 있는 구조에서 스타일 충돌을 최소화할 수 있었음."
    },
    roles: [
      "React 기반으로 전체 웹 플랫폼 UI 설계 및 페이지 컴포넌트 구조 설계 (메인, 상세, 마이페이지, 관리자 등)",
      "THREE.js와 blender를 활용한 3D 커튼 커스터마이징 시뮬레이터 구현: 실시간 커튼 색상·소재·길이 조합 기능 제공",
      "회원 등급(Membership)에 따라 동적으로 가격이 변경되도록 하는 프론트 렌더링 로직 개발",
      "마이페이지 기능 구현: 주문 내역 조회, 거래명세서 PDF 다운로드 등 포함",
      "관리자 페이지 내 제품 등록·수정·삭제, 배너/팝업/캐러셀 등 HTML 콘텐츠 실시간 수정 기능 개발",
      "차트, 그래프, 카드 기반의 대시보드를 구성해 일별/월별 매출 및 인기 상품 통계를 시각적으로 표현",
      "반응형 웹 구현을 위해 다양한 해상도 대응 미디어 쿼리 설계 및 반복 수정 대응",
      "styled-components 기반 컴포넌트 단위 스타일 설계 및 재사용 가능한 UI 구성 요소 구축",
      "디자이너와의 프로토타입 기반 대면 협업을 통해 해상도 기준 명확화 및 반복 수정 방지"
    ],    
    troubleshooting: [
      {
        issue: "고화질 이미지 다량 렌더링으로 인한 페이지 로딩 속도 저하",
        problem: "메인 페이지에 고해상도 이미지가 다수 배치되면서 초기 로딩 시간이 길어지고, 사용자 경험에 악영향을 주는 문제가 발생함.",
        solution: "각 이미지에 lazy loading 기법을 적용해 화면 진입 시점에만 이미지를 불러오도록 최적화하여 렌더링 성능을 개선함."
      },
      {
        issue: "메인 페이지의 모든 요소가 서버 API 호출로 로드되며 속도 지연 발생",
        problem: "배너 이미지, 텍스트, 팝업 등 모든 콘텐츠를 API 요청을 통해 서버에서 실시간 불러오다 보니 초기 렌더링 속도가 느려짐.",
        solution: "react-query를 도입하여 데이터 캐싱 및 요청 타이밍을 조절하고, 불필요한 재요청을 최소화하여 페이지 로딩 성능을 향상시킴."
      },
      {
        issue: "디자이너와의 협업 과정에서 반응형 대응 부족으로 반복 작업 발생",
        problem: "디자이너 측에서 단일 해상도 기준으로만 시안을 제공해, 실제 다양한 디바이스에 맞춰 스타일 수정이 여러 차례 반복되는 상황 발생.",
        solution: "프로토타입을 직접 제작해 피드백을 시각적으로 공유하고, 대면 회의를 통해 주요 해상도(5가지 기준)를 정의함으로써 반응형 웹 설계를 체계화하고 협업 효율을 높임."
      }
    ],        
    review: [
      "첫 상용 프로젝트를 성공적으로 마무리하며 실제 클라이언트의 요구를 반영한 서비스를 직접 기획하고 개발해본 경험은 매우 값진 시간이었습니다.",
      "React 프레임워크에 대한 깊은 이해를 쌓는 계기가 되었으며, 상태 관리, 컴포넌트 설계, API 연동 등 핵심 프론트엔드 기술들을 실무 수준으로 끌어올릴 수 있었습니다.",
      "7개월이라는 긴 기간 동안 실무에서 마주할 수 있는 다양한 이슈들 (퍼포먼스 저하, 협업의 어려움, 디바이스 대응, 유지보수성)을 몸소 겪고 해결하며 한층 더 성장할 수 있었습니다.",
      "가장 인상 깊었던 점은 처음엔 아무것도 없는 백지 상태의 웹사이트가 점차 완성되어 실제 사용자에게 제공되는 형태로 발전해가는 과정을 눈으로 확인하며 개발자로서 큰 성취감을 느낀 것이었습니다.",
      "그 과정에서 수많은 에러와 시행착오를 겪었고, 새로운 라이브러리와 기술을 도입하며 도전에 대한 두려움보다 흥미를 가지게 된 점 또한 저에게 큰 변화였습니다.",
      "이 프로젝트를 통해 프론트엔드 개발자로서의 실력을 단단히 다질 수 있었고, 상용 서비스를 구축하는 데 필요한 실질적인 감각을 익힐 수 있었습니다."
    ],    
  },
  {
    id: 4,
    title: "Finance Fit Mate",
    serviceType: "웹서비스",
    period: "2023.11 - 2023.12 (4주)",
    team: "2명",
    organization: "삼성 청년 SW 아카데미 관통 프로젝트",
    description: "개인의 소비 및 금융 데이터를 기반으로 맞춤형 금융 상품을 추천하는 서비스로, 실시간 환율 정보, 지점 검색, 커뮤니티 등 다양한 기능을 통합한 금융 정보 플랫폼입니다.",
    overview: [
      "개인의 금융 소비 패턴을 분석하여 맞춤형 금융 상품을 추천하는 서비스를 목표로 기획된 프로젝트입니다.",
      "실시간 환율 정보, 위치 기반 지점 찾기 기능, 사용자 간 금융 정보 공유를 위한 커뮤니티 등 다양한 금융 관련 기능을 통합하여 제공했습니다.",
      "소규모 인원(2명)으로 진행된 프로젝트였기 때문에 프론트엔드와 백엔드 전반에 참여하며 풀스택 관점에서 프로젝트를 운영하였습니다.",
      "복잡한 금융 데이터의 흐름을 이해하고 사용자 맞춤 서비스를 제공하는 알고리즘 구성에 집중하였으며, 실시간성과 사용자 편의성을 동시에 고려한 UI/UX를 구성했습니다."
    ],
    tech: ["Vue.js", "Django", "Python", "MySQL"],
    thumbnail: "/assets/projects/finance-fit-mate.png",
    demoUrl: "https://chajunseok.github.io/finance-fit-mate",
    githubUrl: "https://github.com/chajunseok/finance-fit-mate",
    isMobile: false,
    features: [
      "사용자 입력 데이터를 기반으로 개인 맞춤 금융 상품 추천",
      "한국은행 환율 API를 활용한 실시간 환율 정보 제공",
      "현재 위치 기반으로 은행 지점 위치 검색 기능 구현",
      "사용자 간 금융 정보 교류를 위한 커뮤니티 게시판 구성",
      "은행명, 카테고리, 지역 등 조건 기반 필터 기능"
    ],
    techReasons: {
      "Vue.js": "프론트엔드 컴포넌트를 빠르게 구성하고, 실시간 데이터 바인딩이 필요한 금융 정보 페이지에 적합하여 선택함.",
      "Django": "Python 기반의 웹 프레임워크로, 빠르게 API 서버를 구성하고 MySQL과의 연동 및 보안/인증 기능 구현에 적합했음.",
      "Python": "데이터 기반 알고리즘 로직 구현에 적합한 언어로, 금융 상품 추천 로직을 처리하는 데 사용함.",
      "MySQL": "구조화된 금융 상품 및 사용자 데이터를 안정적으로 저장·조회할 수 있어 사용함."
    },
    roles: [
      "Vue.js 기반으로 사용자 대시보드, 금융 상품 추천 UI, 커뮤니티 페이지 등 전체 프론트엔드 구조 구현",
      "Django를 활용한 백엔드 서버 구축 및 API 설계, DB 모델링 및 사용자 인증 시스템 구현",
      "한국은행 환율 API 연동 및 실시간 데이터 클라이언트 연동 처리",
      "MySQL 기반으로 금융 상품/유저 정보 저장, 필터 검색 기능 처리",
      "사용자 입력 데이터를 기반으로 한 금융 상품 추천 알고리즘 로직 설계 및 구현",
      "커뮤니티 게시판 기능 구현 (글 작성/조회/댓글 등록 등)"
    ],
    troubleshooting: [
      {
        issue: "실시간 환율 데이터 갱신 딜레이 문제",
        problem: "API 호출 주기를 조절하지 않아 빈번한 요청으로 인한 응답 오류 발생",
        solution: "환율 데이터 요청을 일정 주기(30분)로 제한하고, 요청 시점 기준으로 localStorage에 캐싱하여 프론트엔드 데이터 갱신 처리"
      },
      {
        issue: "소규모 인원으로 인한 백/프론트 전환 시 작업 분산 어려움",
        problem: "두 명의 팀원이 전체 기능을 나눠 개발하다보니 역할 간 경계가 흐려져 일정 지연 발생",
        solution: "업무 구간을 페이지 단위로 명확히 나누고, Git 브랜치 전략을 활용해 병렬 작업 체계를 정립하여 효율성 확보"
      }
    ],
    review: [
      "삼성 청년 SW 아카데미 프로젝트 공모전에서 최우수상(20개 팀 중 1위)을 수상",
      "프론트엔드와 백엔드 모두를 경험하며 풀스택 관점에서 프로젝트를 설계하고 구현할 수 있었던 소중한 기회였습니다.",
      "특히 Django 기반의 백엔드 API 서버와 Vue.js 프론트를 연동하는 과정에서 전체 흐름을 직접 설계하고 최적화하는 과정을 통해 많은 성장의 발판이 되었습니다.",
      "소규모 팀이었기에 개발 효율과 협업 방식의 중요성을 실감할 수 있었고, 금융과 같이 민감한 정보를 다루는 UI/UX 설계의 중요성도 함께 배웠습니다."
    ]
  },  
  {
    id: 5,
    title: "TISO",
    serviceType: "모바일 앱",
    period: "2023.02 - 2023.04 (7주)",
    team: "6명 (프론트엔드 3명, 백엔드 3명)",
    organization: "삼성 청년 SW 아카데미 특화 프로젝트",
    description: "재난 문자 분석과 실시간 위치 기반 경로 추천 기능을 중심으로, 긴급 상황 시 빠르게 대피할 수 있도록 돕는 모바일 재난 대응 앱입니다. 푸시 알림, 대피소 정보 등 다양한 기능을 통해 위기 대응 능력을 향상시킵니다.",
    overview: [
      "TISO는 충청 지역 방언 '튀소(튀어 나가소)'에서 착안한 이름으로, 대전시 시민을 위한 지역 맞춤형 재난 대응 모바일 애플리케이션입니다.",
      "재난안전본부로부터 수신된 재난 문자 정보를 서버에서 실시간 크롤링하고, 해당 내용을 앱 사용자에게 푸시 알림 형태로 제공하여 신속한 대응을 가능하게 합니다.",
      "현재 위치를 기반으로 대피소, 병원, 약국 등의 시설 정보를 제공하고, GPS를 활용한 실시간 네비게이션 기능을 통해 가장 가까운 안전 지점까지 최적 경로를 안내합니다.",
      "도로 침수, 파손, 낙석 등 돌발 상황이 발생했을 경우 기존 경로를 피하고 우회 경로를 재탐색하여 제공하며, 사용자의 실제 이동 조건을 고려한 경로 최적화 기능을 구현했습니다.",
      "대피 경로 탐색은 Python의 OpenCV를 활용해 대전시 도로망(차도/인도 포함)을 이진화(1: 진입 가능, 0: 불가)하여 생성된 자체 지도 데이터를 바탕으로 A* 알고리즘과 다익스트라 알고리즘을 활용해 상황에 따른 최적 경로를 도출합니다.",
      "재난 유형별 행동 요령은 재난안전본부 가이드 및 유튜브 컨텐츠(엑셀레이터 API)를 통해 시청각 자료로 제공하여 사용자의 재난 대응 인지를 돕습니다."
    ],
    tech: ["React Native", "FastAPI", "Firebase"],
    thumbnail: "/assets/projects/tiso1.gif",
    demoUrl: 0,
    githubUrl: "https://github.com/chajunseok/tiso",
    isMobile: true,
    features: [
      "서버에서 재난 문자 정보를 실시간 크롤링하여 앱 사용자에게 푸시 알림 형태로 전달",
      "사용자 GPS 기반으로 현재 위치에서 가장 가까운 대피소, 병원, 약국 등의 시설 정보를 지도에 시각화하여 제공",
      "대전시 도로 데이터를 기반으로 OpenCV를 활용해 인도/차도를 이진화(진입 가능 여부를 1과 0으로 구분)한 자체 지도 데이터 생성",
      "다익스트라 및 A* 알고리즘을 결합하여 돌발 상황 발생 시 최단 우회 경로를 실시간으로 계산하고 네비게이션 형태로 안내",
      "재난안전본부 가이드 및 유튜브 API(엑셀레이터 활용)를 통해 재난 유형별 행동 요령을 텍스트 + 영상으로 안내",
      "지도 기반 인터페이스를 통해 대피소 위치 및 현재 위치를 시각적으로 확인하고 길찾기 기능 제공",
      "Firebase를 통한 푸시 알림, 사용자 인증, 앱 상태 동기화 기능 구현"
    ],
    techReasons: {
      "React Native": "초기에는 PWA 방식으로 기획되었으나, 푸시 알림, GPS 권한, 백그라운드 처리 등 네이티브 앱의 기능이 필요하여 독립적인 앱 환경을 지원하는 React Native로 전환함. 크로스 플랫폼 개발로 개발 비용과 기간을 절감할 수 있었음.",
      "FastAPI": "푸시 알림 서버, 사용자 인증, 재난 정보 API 크롤링 등 비동기 처리가 많은 로직을 빠르게 처리할 수 있어 적합했으며, Python 기반으로 OpenCV 및 AI 로직과 자연스럽게 통합 가능했음.",
      "Firebase": "푸시 알림(Firebase Cloud Messaging), 사용자 인증, 앱 상태 관리 등 주요 모바일 기능을 안정적으로 지원할 수 있어 채택함.",
      "Python(OpenCV)": "공공 도로 데이터를 이진화하고 도보/차도 구분 경로를 생성하는 데 필요한 이미지 기반 처리에 OpenCV가 필수적이었고, 알고리즘 탐색 기반 데이터와의 연동에도 적합했음."
    },
    roles: [
     "React Native를 활용하여 Android 기반의 앱 전체 UI/UX 구성 및 페이지 전환 로직 개발",
      "재난 문자 알림, 대피소 안내, 네비게이션, 행동요령 안내 등 핵심 기능을 포함한 앱 프론트엔드 전반 개발",
      "Firebase 연동을 통한 푸시 알림 수신 및 사용자 인증 처리 구현",
      "대전시 지자체 공공지도 데이터를 수집하여 OpenCV 기반 전처리 로직 구현: 도보/차도 구분을 위한 색상 기반 이진화 처리",
      "지도 이미지를 2000x2000 사이즈 단위로 분산 처리하여 총 20억 개 이상의 이진 지도 데이터를 생성하고, 이를 대피 경로 탐색 알고리즘에 연결",
      "경로 탐색 기능에서 OpenCV 기반의 지도 데이터를 활용하여 A* 및 다익스트라 알고리즘 경로 요청 시 진입 가능/불가 구역 판단 처리",
      "재난 상황에서의 빠른 대응을 위한 실시간 GPS 기반 대피소 탐색 및 길찾기 인터페이스 구현",
    ],
    troubleshooting: [
      {
        issue: "다수 사용자 접속 시 서버 성능 과부하로 인한 다운 현상",
        problem: "1회 경로 탐색 요청마다 약 20억 개의 이진화된 좌표 데이터를 활용한 A*/다익스트라 알고리즘을 서버에서 수행하던 구조에서, 동시 사용자 수가 10명을 초과할 경우 CPU 점유율이 100%까지 치솟으며 서버가 반복적으로 다운되는 문제가 발생",
        solution: "클라이언트 단으로 일부 연산을 이관하거나, 서버 분산 처리 등의 다양한 시도를 했으나 실제 운영 환경에서의 성능 한계로 인해 여러 사용자를 대상으로 안정적인 배포에는 실패함. 이를 통해 서비스 기획 단계에서 하드웨어 자원 대비 기능 설계가 중요하다는 점, 그리고 실제 배포 전 부하 테스트와 성능 설계가 얼마나 중요한지에 대한 실질적인 교훈을 얻음"
      },
      {
        issue: "지도를 기반으로 한 UI 구조에서 라우터 중첩에 따른 렌더링 충돌 문제",
        problem: "혁신적인 디자인을 구현하기 위해 메인 화면에 지도를 고정하고, 하단에 사이드바를 두어 사이드바 내 콘텐츠가 스크린처럼 변하는 구조를 채택했으나, React Native의 Stack Navigator가 꼬이면서 화면 전환 오류와 마운트 훅 충돌 문제가 빈번히 발생함",
        solution: "메인 화면과 사이드바를 분리된 두 개의 Stack Navigator로 구성하고, 사이드바에 독립적인 네비게이션 흐름을 부여함으로써 각 영역의 라우팅 충돌 없이 안정적인 디스플레이 전환이 가능하게 구현. 이로 인해 사용자의 혼란 없는 UX 흐름을 유지하면서 의도한 디자인을 정확히 반영할 수 있었음"
      }
    ],    
    review: [
      "React Native를 활용한 첫 모바일 앱 프로젝트로, 프론트엔드가 앱에서 어떻게 동작하는지에 대한 구조를 이해하고, apk 빌드 및 배포 과정까지 실제 앱 개발의 전반적인 흐름을 직접 경험할 수 있었던 소중한 기회였습니다.",
      "특히 개발 막바지에 서버의 하드웨어 성능 한계로 인해 앱의 정식 배포가 불가능하다는 결론에 이르렀을 때 큰 아쉬움을 느꼈고, 이후 서비스 기획 단계에서 기능의 복잡성뿐 아니라 자원 대비 성능, 부하 테스트 등을 반드시 고려해야 한다는 교훈을 얻었습니다. 이 경험 덕분에 이후 프로젝트에서는 항상 기획 초기에 기술적 현실성과 성능 고려를 포함한 설계를 우선하는 습관을 갖게 되었습니다.",
      "또한 실제 기업 코딩 테스트에서 학습했던 다익스트라, A* 알고리즘을 실제 서비스에 적용해본 경험은 매우 흥미로웠고, 이론이 실전에 어떻게 활용될 수 있는지를 체감할 수 있는 특별한 경험이었습니다. 실제로 대전시 전체를 대상으로 현재 위치에서 각 대피소까지의 최단 경로를 시각화해보았을 때 느꼈던 감동과 개발의 즐거움은 지금도 인상 깊게 남아 있습니다.",
      "실패를 통해 더 많이 배울 수 있다는 것을 다시금 느끼게 해준 프로젝트였으며, 기술적인 도전뿐 아니라 서비스 설계, 구조 설계, 사용자 경험까지 다방면에서 성장할 수 있었던 계기였습니다."
    ],    
  }  
];
